#!/usr/bin/env python3
"""
Environment Setup Helper for LiveKit Voice Agent

This script helps you set up your environment variables for development.
It creates a .env file with your API keys so you don't have to type them every time.

Usage:
    python setup_env.py
"""

from pathlib import Path


def main():
    """Set up environment variables for development."""
    print("üîß LiveKit Voice Agent Environment Setup")
    print("=" * 50)

    env_file = Path(__file__).parent / ".env"

    # Check if .env already exists
    if env_file.exists():
        print(f"‚ö†Ô∏è  Environment file already exists: {env_file}")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != "y":
            print("Setup cancelled.")
            return

    print("\nPlease enter your API keys. You can find these in your respective dashboards:")
    print("- LiveKit: https://cloud.livekit.io/")
    print("- OpenAI: https://platform.openai.com/api-keys")
    print("- Cartesia: https://cartesia.ai/")
    print("- Deepgram (optional): https://console.deepgram.com/")
    print()

    # LiveKit configuration (required)
    print("üì° LiveKit Configuration (Required)")
    livekit_url = input("LIVEKIT_URL (e.g., wss://your-project.livekit.cloud): ").strip()
    livekit_api_key = input("LIVEKIT_API_KEY: ").strip()
    livekit_api_secret = input("LIVEKIT_API_SECRET: ").strip()

    if not all([livekit_url, livekit_api_key, livekit_api_secret]):
        print("‚ùå LiveKit configuration is required. Setup cancelled.")
        return

    # OpenAI configuration (required)
    print("\nü§ñ OpenAI Configuration (Required)")
    openai_api_key = input("OPENAI_API_KEY: ").strip()

    if not openai_api_key:
        print("‚ùå OpenAI API key is required. Setup cancelled.")
        return

    # Cartesia configuration (required)
    print("\nüé§ Cartesia TTS Configuration (Required)")
    cartesia_api_key = input("CARTESIA_API_KEY: ").strip()

    if not cartesia_api_key:
        print("‚ùå Cartesia API key is required. Setup cancelled.")
        return

    # Deepgram configuration (optional)
    print("\nüéß Deepgram STT Configuration (Optional - press Enter to skip)")
    deepgram_api_key = input("DEEPGRAM_API_KEY (optional): ").strip()

    # Create .env file content
    env_content = f"""# LiveKit Voice Agent Environment Variables
# Generated by setup_env.py

# LiveKit Configuration
LIVEKIT_URL={livekit_url}
LIVEKIT_API_KEY={livekit_api_key}
LIVEKIT_API_SECRET={livekit_api_secret}

# For compatibility with different LiveKit tools
LIVEKIT_SERVER_URL={livekit_url}

# AI Service API Keys
OPENAI_API_KEY={openai_api_key}
CARTESIA_API_KEY={cartesia_api_key}
"""

    if deepgram_api_key:
        env_content += f"DEEPGRAM_API_KEY={deepgram_api_key}\n"
    else:
        env_content += "# DEEPGRAM_API_KEY=your_deepgram_key_here\n"

    env_content += """
# Logging
LOG_LEVEL=INFO

# Development Settings
DEBUG=True
"""

    # Write .env file
    try:
        with open(env_file, "w") as f:
            f.write(env_content)

        print(f"\n‚úÖ Environment file created successfully: {env_file}")
        print("\nüöÄ You can now run the voice agent with:")
        print("   python voice_agent_worker.py dev")
        print("\nüîí Note: The .env file is ignored by git for security.")

    except Exception as e:
        print(f"‚ùå Failed to create environment file: {e}")
        return


if __name__ == "__main__":
    main()

# Backend Environment Variables
#
# This file provides an example of the environment variables required to run the backend server.
# For local development, copy this file to .env and fill in the values.
# The .env file is ignored by git, so your secrets will not be committed.

# --- General Application Settings ---

# Set to "True" for local development to enable debug mode, which provides more detailed error messages
# and enables development-specific features (like permissive CORS).
# For production, this should be set to "False".
DEBUG=True

# The logging level for the application.
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO


# --- Firebase Configuration ---

# The ID of your Firebase project. This should be consistent across your frontend and backend.
# Default is set for this project, but can be overridden.
FIREBASE_PROJECT_ID="spaced-b571d"

# --- Firebase Credentials ---
# The Admin SDK uses a standard order to find credentials:
# 1. If FIREBASE_AUTH_EMULATOR_HOST is set, it connects to the local emulators and ignores credentials.
# 2. If GOOGLE_APPLICATION_CREDENTIALS is set, it uses the specified service account file.
#
# For local development WITH emulators:
# Uncomment FIREBASE_AUTH_EMULATOR_HOST.
#
# For local development WITHOUT emulators (against live Firebase):
# Set GOOGLE_APPLICATION_CREDENTIALS to the path of your key file.
# e.g., GOOGLE_APPLICATION_CREDENTIALS=./firebase_service_account.json
#
# For Production/Staging:
# Set GOOGLE_APPLICATION_CREDENTIALS to the path of the key file on the server.

# Path to your service account key file.
GOOGLE_APPLICATION_CREDENTIALS=

# Host for the local Firebase Auth emulator.
# FIREBASE_AUTH_EMULATOR_HOST="localhost:9099"


# --- Service Dependencies ---

# The connection URL for your Redis instance.
# For local development, it defaults to a standard local Redis installation.
# For production (e.g., on Render), this will be provided by the hosting service.
REDIS_URL="redis://localhost:6379"

# Your API key for OpenAI.
# This is required for features that involve generating questions or processing conversational turns.
OPENAI_API_KEY="your-openai-api-key-here"

# Your API key for Cartesia TTS.
# This is required for the text-to-speech functionality.
CARTESIA_API_KEY="your-cartesia-api-key-here"


# --- LiveKit Configuration ---

# LiveKit API credentials for creating rooms and managing sessions.
# Get these from your LiveKit Cloud dashboard or self-hosted server.
LIVEKIT_API_KEY="your-livekit-api-key-here"
LIVEKIT_API_SECRET="your-livekit-api-secret-here"

# LiveKit server URL. For LiveKit Cloud, this will be provided in your dashboard.
# For self-hosted, use your server's WebSocket URL.
# Example: "wss://your-project.livekit.cloud"
LIVEKIT_SERVER_URL="wss://your-livekit-server.livekit.cloud"

# For compatibility with LiveKit CLI tools, set LIVEKIT_URL as well
LIVEKIT_URL="wss://your-livekit-server.livekit.cloud"

# Deepgram API key for speech-to-text (optional alternative to OpenAI Whisper).
# If not provided, the system will use OpenAI Whisper for transcription.
# Deepgram often provides better real-time performance and cost efficiency.
DEEPGRAM_API_KEY="your-deepgram-api-key-here"


# --- CORS Configuration ---

# A comma-separated list of allowed origins for Cross-Origin Resource Sharing (CORS).
# This is primarily for production. In development mode (DEBUG=True), a permissive
# list of local origins is used automatically.
# Example: CORS_ORIGINS="https://your-production-domain.com,https://your-staging-domain.com"
CORS_ORIGINS="" 
# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          
      - name: Report Flutter & Dart versions
        run: |
          flutter --version
          dart --version
          
      - name: Get dependencies
        run: |
          cd flutter_app
          flutter pub get
        
      - name: Enable web
        run: flutter config --enable-web
        
      - name: Build web with optimizations
        run: |
          cd flutter_app
          # Build with basic performance optimizations
          flutter build web --release --tree-shake-icons
          
      - name: Verify build output
        run: |
          echo "Checking build directory contents:"
          ls -la flutter_app/build/web/
          echo "Checking main.dart.js exists:"
          ls -la flutter_app/build/web/main.dart.js || echo "main.dart.js is missing!"
        
      - name: Prepare web files
        run: |
          # Copy CNAME file for custom domain (if it exists in flutter_app/web)
          if [ -f "flutter_app/web/CNAME" ]; then
            echo "Copying CNAME file from flutter_app/web for custom domain"
            cp flutter_app/web/CNAME flutter_app/build/web/CNAME
          elif [ -f "CNAME" ]; then
            echo "Copying CNAME file from root for custom domain"
            cp CNAME flutter_app/build/web/CNAME
          fi
          
          # Always use the optimized alt-index.html as the main index
          if [ -f "alt-index.html" ]; then
            echo "Using optimized alt-index.html as main index"
            cp alt-index.html flutter_app/build/web/index.html
          fi
          
          # Create .nojekyll file to bypass Jekyll processing
          touch flutter_app/build/web/.nojekyll
          
          # Simple 404.html for SPA routing
          cat > flutter_app/build/web/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Spaced</title>
            <script>
              var l = window.location;
              l.replace(l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') + l.pathname.split('/').slice(0, 1).join('/') + '/' + l.pathname.slice(1).split('/').slice(0).join('/') + (l.search || '') + l.hash);
            </script>
          </head>
          <body><p>Redirecting...</p></body>
          </html>
          EOL
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './flutter_app/build/web'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 
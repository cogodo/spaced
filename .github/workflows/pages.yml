# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'
          channel: 'stable'
          
      - name: Report Flutter & Dart versions
        run: |
          flutter --version
          dart --version
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Enable web
        run: flutter config --enable-web
        
      - name: Build web with verbose output
        run: |
          # Build with optimizations for performance
          flutter build web --release \
            --web-renderer canvaskit \
            --tree-shake-icons \
            --dart-define=flutter.inspector.structuredErrors=false \
            --source-maps \
            --verbose
          
      - name: Verify build output
        run: |
          echo "Checking build directory contents:"
          ls -la build/web/
          echo "Checking main.dart.js exists:"
          ls -la build/web/main.dart.js || echo "main.dart.js is missing!"
        
      - name: Prepare web files
        run: |
          # Create 404.html file for SPA routing
          cat > build/web/404.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Spaced Repetition App</title>
            <script type="text/javascript">
              // Single Page Apps for GitHub Pages
              // https://github.com/rafgraph/spa-github-pages
              var l = window.location;
              l.replace(
                l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
                l.pathname.split('/').slice(0, 1).join('/') + '/' +
                l.pathname.slice(1).split('/').slice(0).join('/') +
                (l.search || '') +
                l.hash
              );
            </script>
          </head>
          <body>
            <p>Redirecting...</p>
          </body>
          </html>
          EOL
          
          # Copy CNAME file for custom domain
          if [ -f "web/CNAME" ]; then
            echo "Copying CNAME file for custom domain"
            cp web/CNAME build/web/CNAME
          fi
          
          # Use alternative index.html if it exists
          if [ -f "alt-index.html" ]; then
            echo "Using alternative index.html"
            cp alt-index.html build/web/index.html
          fi
          
          # Replace the serviceWorkerVersion in index.html
          if [ -f "build/web/index.html" ]; then
            echo "Updating serviceWorkerVersion in index.html"
            # Create a timestamp-based version
            VERSION=$(date +%s)
            # Replace null or undefined serviceWorkerVersion with our timestamp
            sed -i "s/serviceWorkerVersion: null/serviceWorkerVersion: '$VERSION'/g" build/web/index.html
            sed -i "s/serviceWorkerVersion: undefined/serviceWorkerVersion: '$VERSION'/g" build/web/index.html
          fi
          
          # Create .nojekyll file to bypass Jekyll processing
          touch build/web/.nojekyll
          
          # Add performance headers via _headers file (for compatible hosting)
          cat > build/web/_headers << 'EOL'
          /*
            Cache-Control: public, max-age=31536000, immutable
            X-Content-Type-Options: nosniff
            X-Frame-Options: DENY
            X-XSS-Protection: 1; mode=block
            Referrer-Policy: strict-origin-when-cross-origin
          
          /*.html
            Cache-Control: public, max-age=0, must-revalidate
          
          /main.dart.js
            Cache-Control: public, max-age=31536000, immutable
            Content-Encoding: gzip
          
          /flutter.js
            Cache-Control: public, max-age=31536000, immutable
            Content-Encoding: gzip
          EOL
          
          # Optimize images and assets
          echo "Optimizing build output..."
          
          # Create sw.js with better caching strategy
          cat > build/web/sw.js << 'EOL'
          const CACHE_NAME = 'spaced-v1';
          const urlsToCache = [
            '/',
            '/main.dart.js',
            '/flutter.js',
            '/manifest.json',
            '/icons/favicon_circle.ico'
          ];
          
          self.addEventListener('install', event => {
            event.waitUntil(
              caches.open(CACHE_NAME)
                .then(cache => cache.addAll(urlsToCache))
            );
          });
          
          self.addEventListener('fetch', event => {
            event.respondWith(
              caches.match(event.request)
                .then(response => {
                  if (response) {
                    return response;
                  }
                  return fetch(event.request);
                })
            );
          });
          EOL
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build/web'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 